# study_sessions/views.py
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, AllowAny
from django.db.models import Q
from django.utils import timezone
from .models import StudySession, SessionParticipant
from .serializers import StudySessionSerializer, CreateStudySessionSerializer, SessionParticipantSerializer


@api_view(['GET'])
@permission_classes([AllowAny])
def health_check(request):
    return Response({"status": "Study Sessions API is working"})


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_sessions(request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–±–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    sessions = StudySession.objects.filter(
        is_active=True,
        scheduled_time__gte=timezone.now()
    ).order_by('scheduled_time')
    serializer = StudySessionSerializer(sessions, many=True)
    return Response(serializer.data)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_my_sessions(request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)"""
    # –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    created_sessions = StudySession.objects.filter(created_by=request.user, is_active=True)

    # –°–µ—Å—Å–∏–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫
    participant_sessions = StudySession.objects.filter(
        participants__user=request.user,
        participants__is_active=True,
        is_active=True
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    sessions = (created_sessions | participant_sessions).distinct().order_by('scheduled_time')
    serializer = StudySessionSerializer(sessions, many=True)
    return Response(serializer.data)


# study_sessions/views.py - –ò–°–ü–†–ê–í–õ–Ø–ï–ú create_session
@api_view(['POST'])
@permission_classes([AllowAny])  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º AllowAny
def create_session(request):
    """–°–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é"""
    print(f"üéØ Create session request received")
    print(f"üì¶ Data: {request.data}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º testuser –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    from django.contrib.auth.models import User
    try:
        user = User.objects.get(username='testuser')
        print(f"üë§ Using default user: {user.username}")
    except User.DoesNotExist:
        # –ï—Å–ª–∏ testuser –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        user = User.objects.create_user(
            username='testuser',
            email='test@test.com',
            password='testpass123'
        )
        print(f"üë§ Created default user: {user.username}")

    serializer = CreateStudySessionSerializer(data=request.data)
    if serializer.is_valid():
        session = serializer.save(created_by=user)
        SessionParticipant.objects.create(session=session, user=user)

        print(f"‚úÖ Session created: {session.title}")
        return Response(StudySessionSerializer(session).data, status=status.HTTP_201_CREATED)

    print(f"‚ùå Validation errors: {serializer.errors}")
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def join_session(request, session_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É—á–µ–±–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        session = StudySession.objects.get(id=session_id, is_active=True)
    except StudySession.DoesNotExist:
        return Response({'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=status.HTTP_404_NOT_FOUND)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ
    if SessionParticipant.objects.filter(session=session, user=request.user).exists():
        return Response({'error': '–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏'}, status=status.HTTP_400_BAD_REQUEST)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if session.current_participants_count >= session.max_participants:
        return Response({'error': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}, status=status.HTTP_400_BAD_REQUEST)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
    if session.scheduled_time <= timezone.now():
        return Response({'error': '–ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–≤—à–µ–π—Å—è —Å–µ—Å—Å–∏–∏'}, status=status.HTTP_400_BAD_REQUEST)

    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participant = SessionParticipant.objects.create(session=session, user=request.user)
    return Response({'status': '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏'}, status=status.HTTP_201_CREATED)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def leave_session(request, session_id):
    """–ü–æ–∫–∏–Ω—É—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é"""
    try:
        participant = SessionParticipant.objects.get(
            session_id=session_id,
            user=request.user,
            is_active=True
        )
    except SessionParticipant.DoesNotExist:
        return Response({'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏'}, status=status.HTTP_404_NOT_FOUND)

    # –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏—é (–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –µ—ë)
    if participant.session.created_by == request.user:
        return Response({'error': '–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏—é'}, status=status.HTTP_400_BAD_REQUEST)

    participant.delete()
    return Response({'status': '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é'})


@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_session(request, session_id):
    """–£–¥–∞–ª–∏—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    try:
        session = StudySession.objects.get(id=session_id, created_by=request.user)
    except StudySession.DoesNotExist:
        return Response({'error': '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤'}, status=status.HTTP_404_NOT_FOUND)

    session.is_active = False
    session.save()
    return Response({'status': '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞'})

@api_view(['GET'])
@permission_classes([AllowAny])
def get_invitations(request):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    return Response({
        'message': '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏',
        'invitations': []
    })

@api_view(['POST'])
@permission_classes([AllowAny])
def send_invitation(request, session_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    return Response({
        'message': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)',
        'session_id': session_id,
        'user_id': request.data.get('user_id')
    })

@api_view(['POST'])
@permission_classes([AllowAny])
def respond_to_invitation(request, invitation_id):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    return Response({
        'message': f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {request.data.get("response", "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")}',
        'invitation_id': invitation_id
    })


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_session_participants(request, session_id):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏"""
    try:
        session = StudySession.objects.get(id=session_id)
        participants = session.participants.filter(is_active=True)
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        return Response([])
    except StudySession.DoesNotExist:
        return Response({'error': 'Session not found'}, status=404)