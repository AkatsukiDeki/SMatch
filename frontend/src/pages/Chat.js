import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
import { chatAPI, matchingAPI, studySessionsAPI } from '../services/api';
import WebSocketService from '../services/websocket';
import { useNavigate } from 'react-router-dom';
import { debounce } from 'lodash';
import MessageInput from '../components/chat/MessageInput';
import './Chat.css';

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Ç–∞
const ChatItem = React.memo(({ chat, isSelected, onClick }) => {
  const getInitials = (profile) => {
    if (!profile) return '?';
    return profile.first_name?.charAt(0) ||
           profile.username?.charAt(0) ||
           '?';
  };

  const getDisplayName = (profile) => {
    if (!profile) return '–ó–∞–≥—Ä—É–∑–∫–∞...';
    return profile.first_name || profile.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
  };

  const getFaculty = (profile) => {
    return profile?.faculty || '–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω';
  };

  return (
    <div className={`chat-item ${isSelected ? 'active' : ''}`} onClick={onClick}>
      <div className="chat-avatar">
        {getInitials(chat.other_user_profile)}
      </div>
      <div className="chat-info">
        <div className="chat-header">
          <strong>{getDisplayName(chat.other_user_profile)}</strong>
          {chat.unread_count > 0 && (
            <span className="unread-badge">{chat.unread_count}</span>
          )}
        </div>
        <div className="last-message">
          {chat.last_message?.content || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}
        </div>
        <div className="chat-meta">
          <span>{getFaculty(chat.other_user_profile)}</span>
        </div>
      </div>
    </div>
  );
});

ChatItem.displayName = 'ChatItem';

const Chat = () => {
  const { user } = useAuth();
  const [chatRooms, setChatRooms] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [error, setError] = useState('');
  const messagesEndRef = useRef(null);
  const textareaRef = useRef(null);
  const navigate = useNavigate();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const normalizeUserProfile = (profile) => {
    if (!profile) return null;

    return {
      id: profile.id,
      username: profile.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
      first_name: profile.first_name || profile.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
      faculty: profile.faculty || '–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω',
      avatar: profile.avatar
    };
  };

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
  const normalizeChatData = (chat) => {
    return {
      ...chat,
      other_user_profile: normalizeUserProfile(chat.other_user_profile)
    };
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  const loadChatRooms = useCallback(async () => {
    try {
      setLoading(true);
      const response = await chatAPI.getChatRooms();

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
      const normalizedChats = response.data.map(normalizeChatData);
      setChatRooms(normalizedChats);
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã');
    } finally {
      setLoading(false);
    }
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å debounce
  const debouncedLoadChats = useCallback(
    debounce(loadChatRooms, 300),
    [loadChatRooms]
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMessages = useCallback(async (chatRoomId) => {
    try {
      const response = await chatAPI.getMessages(chatRoomId);
      setMessages(response.data);
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const sendMessage = async (messageContent) => {
    if (!selectedChat || !messageContent.trim() || sending) return;

    const content = messageContent.trim();

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const tempMessage = {
      id: `temp-${Date.now()}`,
      content: content,
      sender: user.id,
      timestamp: new Date().toISOString(),
      isSending: true
    };

    try {
      setSending(true);
      setNewMessage('');
      adjustTextareaHeight();

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      setMessages(prev => [...prev, tempMessage]);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await chatAPI.sendMessage(selectedChat.id, { content: content });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      await loadMessages(selectedChat.id);
      debouncedLoadChats();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      setMessages(prev => prev.filter(msg => msg.id !== tempMessage.id));
    } finally {
      setSending(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–±–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const handleCreateSession = async (partnerUser) => {
    try {
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', partnerUser);

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const sessionData = {
        title: `–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è —Å ${partnerUser.first_name || partnerUser.username}`,
        description: `–£—á–µ–±–Ω–∞—è —Å–µ—Å—Å–∏—è —Å ${partnerUser.first_name || partnerUser.username}. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ–∑–∞–Ω–∏–º–∞–µ–º—Å—è!`,
        subject_name: '–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
        scheduled_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –ó–∞–≤—Ç—Ä–∞
        duration_minutes: 60,
        max_participants: 2
      };

      const response = await studySessionsAPI.createSession(sessionData);
      const newSession = response.data;

      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', newSession);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      await studySessionsAPI.sendInvitation(newSession.id, partnerUser.id);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
      const invitationMessage = `üìö –Ø —Å–æ–∑–¥–∞–ª(–∞) —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é "${newSession.title}"! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!`;
      await sendMessage(invitationMessage);

      alert('‚úÖ –£—á–µ–±–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: ' + (error.response?.data?.error || error.message));
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
  const adjustTextareaHeight = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + 'px';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(newMessage);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleMessageChange = (e) => {
    setNewMessage(e.target.value);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
  const handleChatSelect = (chat) => {
    const normalizedChat = normalizeChatData(chat);
    setSelectedChat(normalizedChat);
    loadMessages(normalizedChat.id);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ –ø–æ —á–∞—Ç—É
  const getPartnerInfo = (chat) => {
    if (!chat?.other_user_profile) {
      return {
        initials: '?',
        name: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        faculty: '–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'
      };
    }

    const profile = chat.other_user_profile;
    return {
      initials: profile.first_name?.charAt(0) || profile.username?.charAt(0) || '?',
      name: profile.first_name || profile.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
      faculty: profile.faculty || '–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'
    };
  };

  const partnerInfo = selectedChat ? getPartnerInfo(selectedChat) : null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (user) {
      loadChatRooms();
    }
  }, [user, loadChatRooms]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
  useEffect(() => {
    if (selectedChat && user) {
      loadMessages(selectedChat.id);
    }
  }, [selectedChat, user, loadMessages]);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã textarea
  useEffect(() => {
    adjustTextareaHeight();
  }, [newMessage]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      WebSocketService.disconnect();
      debouncedLoadChats.cancel();
    };
  }, [debouncedLoadChats]);

  if (!user) {
    return (
      <div className="chat-page">
        <div className="auth-required">
          <h2>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <button onClick={() => navigate('/login')} className="login-btn">
            –í–æ–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="chat-page">
      <div className="chat-container">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —á–∞—Ç–∞–º–∏ */}
        <div className="chat-sidebar">
          <div className="sidebar-header">
            <h2>–ß–∞—Ç—ã</h2>
            <button
              className="new-chat-btn"
              onClick={() => navigate('/matching')}
              title="–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"
              aria-label="–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"
            >
              üîç
            </button>
          </div>

          <div className="chat-list">
            {loading ? (
              <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</div>
            ) : error ? (
              <div className="no-chats">
                <div className="no-chats-icon">‚ö†Ô∏è</div>
                <p>{error}</p>
                <button onClick={loadChatRooms} className="find-partners-btn">
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              </div>
            ) : chatRooms.length === 0 ? (
              <div className="no-chats">
                <div className="no-chats-icon">üí¨</div>
                <p>–ù–µ—Ç —á–∞—Ç–æ–≤</p>
                <small>–ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–∏—Å–∫"</small>
              </div>
            ) : (
              chatRooms.map(chat => (
                <ChatItem
                  key={chat.id}
                  chat={chat}
                  isSelected={selectedChat?.id === chat.id}
                  onClick={() => handleChatSelect(chat)}
                />
              ))
            )}
          </div>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <div className="chat-main">
          {selectedChat ? (
            <>
              <div className="chat-header">
                <div className="chat-partner">
                  <div className="partner-avatar">
                    {partnerInfo.initials}
                  </div>
                  <div className="partner-info">
                    <h3>{partnerInfo.name}</h3>
                    <span>{partnerInfo.faculty}</span>
                  </div>
                </div>
              </div>

              <div className="messages-container">
                {messages.length === 0 ? (
                  <div className="no-messages">
                    <div className="no-messages-icon">üí≠</div>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                    <small>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!</small>
                  </div>
                ) : (
                  <>
                    {messages.map(message => (
                      <div
                        key={message.id}
                        className={`message ${message.sender === user.id ? 'own' : 'other'} ${message.isSending ? 'sending' : ''}`}
                      >
                        <div className="message-content">
                          <div className="message-text">{message.content}</div>
                          <div className="message-time">
                            {new Date(message.timestamp).toLocaleTimeString([], {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                            {message.isSending && (
                              <span className="sending-indicator"> ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                    <div ref={messagesEndRef} />
                  </>
                )}
              </div>

              <MessageInput
                onSendMessage={sendMessage}
                onCreateSession={handleCreateSession}
                otherUser={selectedChat.other_user_profile}
              />
            </>
          ) : (
            <div className="chat-welcome">
              <div className="welcome-content">
                <div className="welcome-icon">üí¨</div>
                <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</p>
                <button
                  onClick={() => navigate('/matching')}
                  className="find-partners-btn"
                >
                  üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Chat;