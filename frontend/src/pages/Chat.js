import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
import { chatAPI, studySessionsAPI } from '../services/api';
import WebSocketService from '../services/websocket';
import ChatList from '../components/chat/ChatList';
import MessageList from '../components/chat/MessageList';
import MessageInput from '../components/chat/MessageInput';
import { useNavigate, useLocation } from 'react-router-dom';
import './Chat.css';

const Chat = () => {
  const { user, loading: authLoading } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [chatRooms, setChatRooms] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [otherUserProfile, setOtherUserProfile] = useState(null);
  const navigate = useNavigate();
  const location = useLocation();
  const messagesEndRef = useRef(null);

  useEffect(() => {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –∏–∑ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º
    if (location.state?.selectedChat) {
      setSelectedChat(location.state.selectedChat);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!authLoading && user) {
      loadChatRooms();
    }

    return () => {
      WebSocketService.disconnect();
    };
  }, [location, authLoading, user]); // –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  useEffect(() => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω —á–∞—Ç –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω
    if (selectedChat && user && !authLoading) {
      loadMessages(selectedChat.id);
      setupWebSocket(selectedChat.id);
      setOtherUserProfile(selectedChat.other_user_profile);
    } else {
      WebSocketService.disconnect();
      setOtherUserProfile(null);
    }
  }, [selectedChat, user, authLoading]);

  const setupWebSocket = (chatRoomId) => {
    WebSocketService.disconnect();

    if (user && user.username) {
      WebSocketService.connect(chatRoomId, user.username);
      WebSocketService.onMessage(handleNewMessage);
    }
  };

  const handleNewMessage = (messageData) => {
    if (!selectedChat || !user) return;

    const newMessage = {
      id: Date.now(),
      sender: messageData.username === user.username ? user.id : selectedChat.other_user,
      content: messageData.message,
      timestamp: new Date().toISOString(),
      is_read: messageData.username === user.username
    };

    setMessages(prev => [...prev, newMessage]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    setChatRooms(prev => prev.map(chat =>
      chat.id === selectedChat.id
        ? { ...chat, last_message: newMessage }
        : chat
    ));
  };

  const loadChatRooms = async () => {
    try {
      setLoading(true);
      const response = await chatAPI.getChatRooms();
      setChatRooms(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadMessages = async (chatRoomId) => {
    try {
      const response = await chatAPI.getMessages(chatRoomId);
      setMessages(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  };

  const sendMessage = async (content) => {
    if (!selectedChat || !content.trim() || !user) return;

    const sent = WebSocketService.sendMessage(content);

    if (!sent) {
      try {
        await chatAPI.sendMessage(selectedChat.id, { content });
        loadMessages(selectedChat.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
  };

  const handleCreateSession = async (userProfile) => {
    if (!userProfile || !user) return;

    try {
      const sessionData = {
        title: `–°–µ—Å—Å–∏—è —Å ${userProfile.first_name || userProfile.username}`,
        description: `–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —É—á–µ–±–Ω–∞—è —Å–µ—Å—Å–∏—è —Å ${userProfile.first_name || userProfile.username}`,
        subject_name: '–û–±—â–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
        scheduled_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        duration_minutes: 60,
        max_participants: 2
      };

      const response = await studySessionsAPI.createSession(sessionData);
      const newSession = response.data;

      const sessionMessage = `üìö –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é! "${newSession.title}" –Ω–∞ ${new Date(newSession.scheduled_time).toLocaleDateString()}`;
      await sendMessage(sessionMessage);

      alert(`–°–µ—Å—Å–∏—è "${newSession.title}" —Å–æ–∑–¥–∞–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
    }
  };

  const handleQuickSession = () => {
    if (!otherUserProfile || !user) return;

    const quickSessionMessage = `üéØ –ü—Ä–µ–¥–ª–∞–≥–∞—é –±—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é! –ï—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è?`;
    sendMessage(quickSessionMessage);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  if (authLoading) {
    return (
      <div className="chat-container">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!user) {
    return (
      <div className="chat-container">
        <div className="auth-required">
          <h2>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</p>
          <button
            onClick={() => navigate('/login')}
            className="login-btn"
          >
            –í–æ–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤
  if (loading) {
    return (
      <div className="chat-container">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="chat-page">
      <div className="chat-container">
        <ChatList
          chatRooms={chatRooms}
          selectedChat={selectedChat}
          onSelectChat={setSelectedChat}
        />

        <div className="chat-main">
          {selectedChat ? (
            <>
              <div className="chat-header">
                <div className="chat-header-info">
                  <h3>
                    {otherUserProfile?.first_name && otherUserProfile?.last_name
                      ? `${otherUserProfile.first_name} ${otherUserProfile.last_name}`
                      : otherUserProfile?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    }
                  </h3>
                  <span className="chat-status">
                    {otherUserProfile?.faculty}
                    <span className="online-status">‚óè –æ–Ω–ª–∞–π–Ω</span>
                  </span>
                </div>
                <div className="chat-header-actions">
                  <button
                    className="quick-session-btn"
                    onClick={handleQuickSession}
                    title="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–µ—Å—Å–∏—é"
                  >
                    üéØ –ë—ã—Å—Ç—Ä–∞—è —Å–µ—Å—Å–∏—è
                  </button>
                </div>
              </div>

              <MessageList
                messages={messages}
                currentUser={user}
                otherUserProfile={otherUserProfile}
                onCreateSession={handleCreateSession}
              />

              <MessageInput
                onSendMessage={sendMessage}
                onCreateSession={handleCreateSession}
                otherUser={otherUserProfile}
              />
            </>
          ) : (
            <div className="chat-placeholder">
              <div className="placeholder-icon">üí¨</div>
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</h3>
              <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–í–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏"</p>
              <div className="placeholder-features">
                <div className="feature">üíï –í–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏</div>
                <div className="feature">üìö –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Å–µ—Å—Å–∏–∏</div>
                <div className="feature">üéØ –ë—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Chat;