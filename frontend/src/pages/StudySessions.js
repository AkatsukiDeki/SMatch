import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { studySessionsAPI } from '../services/api';
import SessionCard from '../components/study-sessions/SessionCard';
import SessionForm from '../components/study-sessions/SessionForm';
import SessionInvitations from '../components/study-sessions/SessionInvitations';
import SessionCardSkeleton from '../components/study-sessions/SessionCardSkeleton';
import './StudySessions.css';

const StudySessions = () => {
  const { user } = useAuth();
  const [sessions, setSessions] = useState([]);
  const [mySessions, setMySessions] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [activeTab, setActiveTab] = useState('all');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const loadSessions = async () => {
    try {
      setLoading(true);
      setError('');
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π...');

      const [allSessions, mySessionsData] = await Promise.all([
        studySessionsAPI.getSessions(),
        studySessionsAPI.getMySessions()
      ]);

      console.log('‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏:', allSessions.data);
      console.log('‚úÖ –ú–æ–∏ —Å–µ—Å—Å–∏–∏:', mySessionsData.data);

      setSessions(allSessions.data);
      setMySessions(mySessionsData.data);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateSession = async (sessionData) => {
    try {
      await studySessionsAPI.createSession(sessionData);
      setShowForm(false);
      await loadSessions();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: ' + (error.response?.data?.error || error.message));
    }
  };

  const handleJoinSession = async (sessionId) => {
    try {
      await studySessionsAPI.joinSession(sessionId);
      await loadSessions();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ—Å—Å–∏–∏: ' + (error.response?.data?.error || error.message));
    }
  };

  const handleLeaveSession = async (sessionId) => {
    try {
      await studySessionsAPI.leaveSession(sessionId);
      await loadSessions();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–µ—Å—Å–∏–∏: ' + (error.response?.data?.error || error.message));
    }
  };

  const handleDeleteSession = async (sessionId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é?')) {
      try {
        await studySessionsAPI.deleteSession(sessionId);
        await loadSessions();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: ' + (error.response?.data?.error || error.message));
      }
    }
  };

  useEffect(() => {
    if (user) {
      loadSessions();
    }
  }, [user]);

  if (!user) {
    return (
      <div className="study-sessions-page">
        <div className="auth-required">
          <h2>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–±–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
        </div>
      </div>
    );
  }

  const displaySessions = activeTab === 'my' ? mySessions : sessions;

  return (
    <div className="study-sessions-page">
      <div className="sessions-header">
        <div className="header-content">
          <h1>üìö –£—á–µ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h1>
          <p>–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —É—á–µ–±–Ω—ã–º –≤—Å—Ç—Ä–µ—á–∞–º</p>
        </div>
        <button
          className="create-session-btn"
          onClick={() => setShowForm(true)}
          disabled={loading}
          type="button"
        >
          ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
        </button>
      </div>

      <div className="sessions-tabs">
        <button
          className={`tab ${activeTab === 'all' ? 'active' : ''}`}
          onClick={() => setActiveTab('all')}
          disabled={loading}
          type="button"
        >
          üìö –í—Å–µ —Å–µ—Å—Å–∏–∏
        </button>
        <button
          className={`tab ${activeTab === 'my' ? 'active' : ''}`}
          onClick={() => setActiveTab('my')}
          disabled={loading}
          type="button"
        >
          üë§ –ú–æ–∏ —Å–µ—Å—Å–∏–∏
        </button>
        <button
          className={`tab ${activeTab === 'invitations' ? 'active' : ''}`}
          onClick={() => setActiveTab('invitations')}
          disabled={loading}
          type="button"
        >
          üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        </button>
      </div>

      <div className="sessions-content">
        {error && (
          <div className="error-message">
            <p>{error}</p>
            <button onClick={loadSessions}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
          </div>
        )}

        {activeTab === 'invitations' ? (
          <SessionInvitations />
        ) : (
          <>
            {loading ? (
              <div className="sessions-grid">
                {[...Array(6)].map((_, index) => (
                  <SessionCardSkeleton key={index} />
                ))}
              </div>
            ) : displaySessions.length === 0 ? (
              <div className="no-sessions">
                <div className="no-sessions-icon">
                  {activeTab === 'all' ? 'üìö' : 'üë§'}
                </div>
                <h3>
                  {activeTab === 'all'
                    ? '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–µ–±–Ω—ã—Ö —Å–µ—Å—Å–∏–π'
                    : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Å—Å–∏–π'
                  }
                </h3>
                <p>
                  {activeTab === 'all'
                    ? '–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é!'
                    : '–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∏ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏—è–º'
                  }
                </p>
                {activeTab === 'my' && (
                  <button
                    className="create-session-btn"
                    onClick={() => setShowForm(true)}
                    type="button"
                  >
                    ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é
                  </button>
                )}
              </div>
            ) : (
              <div className="sessions-grid">
                {displaySessions.map(session => (
                  <SessionCard
                    key={session.id}
                    session={session}
                    currentUser={user}
                    onJoin={handleJoinSession}
                    onLeave={handleLeaveSession}
                    onDelete={handleDeleteSession}
                    onInviteSent={loadSessions}
                  />
                ))}
              </div>
            )}
          </>
        )}
      </div>

      {showForm && (
        <SessionForm
          onSubmit={handleCreateSession}
          onCancel={() => setShowForm(false)}
        />
      )}
    </div>
  );
};

export default StudySessions;