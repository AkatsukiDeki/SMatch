import React, { useState, useRef, useEffect } from 'react';
import './MessageInput.css';

const MessageInput = ({ onSendMessage, onCreateSession, otherUser }) => {
  const [message, setMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showSessionOptions, setShowSessionOptions] = useState(false);
  const textareaRef = useRef(null);
  const typingTimeoutRef = useRef(null);

  const handleChange = (e) => {
    const value = e.target.value;
    setMessage(value);

    // –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    if (!isTyping && value.trim()) {
      setIsTyping(true);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—á–∞—Ç–∏
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    typingTimeoutRef.current = setTimeout(() => {
      setIsTyping(false);
    }, 1000);
  };

  const handleSend = () => {
    if (message.trim()) {
      onSendMessage(message.trim());
      setMessage('');
      setIsTyping(false);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É textarea
      if (textareaRef.current) {
        textareaRef.current.style.height = 'auto';
      }
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleQuickSession = (type) => {
    let sessionMessage = '';

    switch (type) {
      case 'quick':
        sessionMessage = 'üéØ –ü—Ä–µ–¥–ª–∞–≥–∞—é –±—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é! –ï—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è?';
        break;
      case 'planned':
        sessionMessage = 'üìÖ –•–æ—á–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?';
        break;
      case 'subject':
        sessionMessage = `üìö –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É. –ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
        break;
      default:
        sessionMessage = 'üìö –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é!';
    }

    onSendMessage(sessionMessage);
    setShowSessionOptions(false);
  };

  const handleCreateFullSession = () => {
    if (onCreateSession && otherUser) {
      onCreateSession(otherUser);
    }
    setShowSessionOptions(false);
  };

  const autoResizeTextarea = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 120) + 'px';
    }
  };

  useEffect(() => {
    autoResizeTextarea();
  }, [message]);

  useEffect(() => {
    return () => {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, []);

  const quickReplies = [
    { text: '–ü—Ä–∏–≤–µ—Ç! üëã', emoji: 'üëã' },
    { text: '–ö–∞–∫ –¥–µ–ª–∞?', emoji: 'üòä' },
    { text: '–ï—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è?', emoji: 'üìö' },
    { text: '–û—Ç–ª–∏—á–Ω–æ –ø–æ–Ω—è–ª!', emoji: '‚úÖ' },
  ];

  const handleQuickReply = (text) => {
    onSendMessage(text);
  };

  return (
    <div className="message-input-container">
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
      {isTyping && otherUser && (
        <div className="typing-indicator">
          <div className="typing-dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
          <span className="typing-text">
            {otherUser.first_name || otherUser.username} –ø–µ—á–∞—Ç–∞–µ—Ç...
          </span>
        </div>
      )}

      {/* –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∏–Ω–ø—É—Ç–∞) */}
      {/* –£–î–ê–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ messages.length > 0, —Ç–∞–∫ –∫–∞–∫ messages –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–ø—Å–∞—Ö */}
      {!message.trim() && (
        <div className="quick-replies">
          {quickReplies.map((reply, index) => (
            <button
              key={index}
              className="quick-reply-btn"
              onClick={() => handleQuickReply(reply.text)}
            >
              <span className="quick-reply-emoji">{reply.emoji}</span>
              {reply.text}
            </button>
          ))}
        </div>
      )}

      <div className="message-input">
        <div className="input-actions">
          {/* –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å–µ—Å—Å–∏–π */}
          <div className="session-options-container">
            <button
              className="session-options-btn"
              onClick={() => setShowSessionOptions(!showSessionOptions)}
              title="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–µ–±–Ω—É—é —Å–µ—Å—Å–∏—é"
            >
              üìö
            </button>

            {showSessionOptions && (
              <div className="session-options-dropdown">
                <div className="session-option" onClick={() => handleQuickSession('quick')}>
                  <span className="session-emoji">üéØ</span>
                  <div className="session-info">
                    <div className="session-title">–ë—ã—Å—Ç—Ä–∞—è —Å–µ—Å—Å–∏—è</div>
                    <div className="session-desc">–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</div>
                  </div>
                </div>

                <div className="session-option" onClick={() => handleQuickSession('planned')}>
                  <span className="session-emoji">üìÖ</span>
                  <div className="session-info">
                    <div className="session-title">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å</div>
                    <div className="session-desc">–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</div>
                  </div>
                </div>

                <div className="session-option" onClick={() => handleQuickSession('subject')}>
                  <span className="session-emoji">üìñ</span>
                  <div className="session-info">
                    <div className="session-title">–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É</div>
                    <div className="session-desc">–û–±—Å—É–¥–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç</div>
                  </div>
                </div>

                <div className="session-option" onClick={handleCreateFullSession}>
                  <span className="session-emoji">‚ú®</span>
                  <div className="session-info">
                    <div className="session-title">–ü–æ–ª–Ω–∞—è —Å–µ—Å—Å–∏—è</div>
                    <div className="session-desc">–°–æ–∑–¥–∞—Ç—å —Å –¥–µ—Ç–∞–ª—è–º–∏</div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —ç–º–æ–¥–∑–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏) */}
          <button className="emoji-btn" title="–≠–º–æ–¥–∑–∏">
            üòä
          </button>
        </div>

        <div className="input-container">
          <textarea
            ref={textareaRef}
            value={message}
            onChange={handleChange}
            onKeyPress={handleKeyPress}
            placeholder={`–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${otherUser ? `–¥–ª—è ${otherUser.first_name || otherUser.username}` : ''}...`}
            rows="1"
            className="message-textarea"
          />

          <button
            onClick={handleSend}
            disabled={!message.trim()}
            className="send-btn"
            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
          >
            {message.trim() ? '‚û§' : '‚ö°'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default MessageInput;