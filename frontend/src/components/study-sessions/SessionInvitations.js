import React, { useState, useEffect } from 'react';
import { studySessionsAPI } from '../../services/api';
import './SessionInvitations.css';

const SessionInvitations = () => {
  const [invitations, setInvitations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const loadInvitations = async () => {
    try {
      setLoading(true);
      setError('');
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...');
      const response = await studySessionsAPI.getInvitations();
      console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', response.data);
      setInvitations(response.data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const handleResponse = async (invitationId, response) => {
    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: ${response}`);
      await studySessionsAPI.respondToInvitation(invitationId, response);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setInvitations(prev =>
        prev.map(inv =>
          inv.id === invitationId
            ? { ...inv, status: response, responded_at: new Date().toISOString() }
            : inv
        )
      );

      alert(response === 'accepted' ? 'üéâ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!' : '‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  };

  useEffect(() => {
    loadInvitations();
  }, []);

  const formatDateTime = (dateString) => {
    if (!dateString) return '';
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (error) {
      return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    }
  };

  if (loading) {
    return (
      <div className="invitations-loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="invitations-error">
        <p>{error}</p>
        <button onClick={loadInvitations}>üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </div>
    );
  }

  return (
    <div className="session-invitations">
      <div className="invitations-header">
        <h3>üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —É—á–µ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>
        <button onClick={loadInvitations} className="refresh-btn" title="–û–±–Ω–æ–≤–∏—Ç—å">
          üîÑ
        </button>
      </div>

      <p className="invitations-subtitle">
        –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      </p>

      {invitations.length === 0 ? (
        <div className="no-invitations">
          <div className="no-invitations-icon">üì≠</div>
          <h4>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</h4>
          <p>–ö–æ–≥–¥–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏—à–ª—é—Ç –≤–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —É—á–µ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.</p>
          <div className="demo-tips">
            <h5>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è?</h5>
            <ul>
              <li>‚úÖ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã</li>
              <li>‚úÖ –õ–∞–π–∫–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–∏—Å–∫"</li>
              <li>‚úÖ –î–æ–∂–¥–∏—Ç–µ—Å—å –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤</li>
              <li>‚úÖ –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–∞—Å –Ω–∞ —Å–µ—Å—Å–∏–∏</li>
            </ul>
          </div>
        </div>
      ) : (
        <div className="invitations-stats">
          <div className="stats-card">
            <span className="stats-number">{invitations.length}</span>
            <span className="stats-label">–≤—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</span>
          </div>
          <div className="stats-card">
            <span className="stats-number">
              {invitations.filter(inv => inv.status === 'pending').length}
            </span>
            <span className="stats-label">–æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞</span>
          </div>
        </div>
      )}

      {invitations.length > 0 && (
        <div className="invitations-list">
          {invitations.map((invitation) => (
            <div key={invitation.id} className={`invitation-card ${invitation.status}`}>
              <div className="invitation-header">
                <div className="inviter-info">
                  <div className="inviter-avatar">
                    {invitation.inviter?.username?.charAt(0)?.toUpperCase() || 'U'}
                  </div>
                  <div className="inviter-details">
                    <h4>
                      {invitation.inviter?.first_name && invitation.inviter?.last_name
                        ? `${invitation.inviter.first_name} ${invitation.inviter.last_name}`
                        : invitation.inviter?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                      }
                      <span className="inviter-username">@{invitation.inviter?.username}</span>
                    </h4>
                    <p className="inviter-faculty">
                      {invitation.inviter?.profile?.faculty || '–°—Ç—É–¥–µ–Ω—Ç'}
                      {invitation.inviter?.profile?.year_of_study && ` ‚Ä¢ ${invitation.inviter.profile.year_of_study} –∫—É—Ä—Å`}
                    </p>
                    <span className="invitation-date">
                      üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {formatDateTime(invitation.created_at)}
                    </span>
                  </div>
                </div>
                <div className={`invitation-status ${invitation.status}`}>
                  {invitation.status === 'pending' && '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'}
                  {invitation.status === 'accepted' && '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ'}
                  {invitation.status === 'declined' && '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
                </div>
              </div>

              <div className="session-details">
                <h5>üéØ {invitation.session?.title}</h5>
                <p className="session-description">
                  {invitation.session?.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                </p>
                <div className="session-meta">
                  <span>üìÖ {formatDateTime(invitation.session?.scheduled_time)}</span>
                  <span>‚è±Ô∏è {invitation.session?.duration_minutes} –º–∏–Ω—É—Ç</span>
                  <span>üìö {invitation.session?.subject_name}</span>
                  <span>üë• –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {invitation.session?.created_by}</span>
                </div>
              </div>

              {invitation.status === 'pending' && (
                <div className="invitation-actions">
                  <button
                    className="btn-accept"
                    onClick={() => handleResponse(invitation.id, 'accepted')}
                  >
                    ‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                  </button>
                  <button
                    className="btn-decline"
                    onClick={() => handleResponse(invitation.id, 'declined')}
                  >
                    ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                  </button>
                </div>
              )}

              {invitation.status !== 'pending' && (
                <div className="invitation-response">
                  <p>
                    <strong>
                      {invitation.status === 'accepted' ? '‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' : '‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'}
                    </strong>
                    {invitation.responded_at && (
                      <span className="response-date">
                        üìÖ {formatDateTime(invitation.responded_at)}
                      </span>
                    )}
                  </p>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SessionInvitations;