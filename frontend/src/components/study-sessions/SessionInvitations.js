// src/components/study-sessions/SessionInvitations.js
import React, { useState, useEffect } from 'react';
import { studySessionsAPI } from '../../services/api';
import './SessionInvitations.css';

const SessionInvitations = () => {
  const [invitations, setInvitations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const loadInvitations = async () => {
    try {
      setLoading(true);
      const response = await studySessionsAPI.getInvitations();
      setInvitations(response.data);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
      console.error('Error loading invitations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleResponse = async (invitationId, response) => {
    try {
      await studySessionsAPI.respondToInvitation(invitationId, response);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setInvitations(prev =>
        prev.map(inv =>
          inv.id === invitationId
            ? { ...inv, status: response, responded_at: new Date().toISOString() }
            : inv
        )
      );

      alert(response === 'accepted' ? '–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!' : '–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
    } catch (error) {
      console.error('Error responding to invitation:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  };

  useEffect(() => {
    loadInvitations();
  }, []);

  const formatDateTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      day: 'numeric',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="invitations-loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...</p>
      </div>
    );
  }

  return (
    <div className="session-invitations">
      <h3>üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —É—á–µ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>

      {error && (
        <div className="invitations-error">
          <p>{error}</p>
          <button onClick={loadInvitations}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      )}

      {invitations.length === 0 ? (
        <div className="no-invitations">
          <p>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ —É—á–µ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏</p>
          <small>–ö–æ–≥–¥–∞ –≤–∞–º –ø–æ—Å—Ç—É–ø—è—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</small>
        </div>
      ) : (
        <div className="invitations-list">
          {invitations.map((invitation) => (
            <div key={invitation.id} className={`invitation-card ${invitation.status}`}>
              <div className="invitation-header">
                <div className="inviter-info">
                  <div className="inviter-avatar">
                    {invitation.inviter?.username?.charAt(0)?.toUpperCase() || 'U'}
                  </div>
                  <div className="inviter-details">
                    <h4>{invitation.inviter?.username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å</h4>
                    <span className="invitation-date">
                      {formatDateTime(invitation.created_at)}
                    </span>
                  </div>
                </div>
                <div className={`invitation-status ${invitation.status}`}>
                  {invitation.status === 'pending' && '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞'}
                  {invitation.status === 'accepted' && '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ'}
                  {invitation.status === 'declined' && '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
                </div>
              </div>

              <div className="session-details">
                <h5>{invitation.session?.title}</h5>
                <p className="session-description">
                  {invitation.session?.description}
                </p>
                <div className="session-meta">
                  <span>üìÖ {formatDateTime(invitation.session?.scheduled_time)}</span>
                  <span>‚è±Ô∏è {invitation.session?.duration_minutes} –º–∏–Ω—É—Ç</span>
                  <span>üìö {invitation.session?.subject_name}</span>
                </div>
              </div>

              {invitation.status === 'pending' && (
                <div className="invitation-actions">
                  <button
                    className="btn-accept"
                    onClick={() => handleResponse(invitation.id, 'accepted')}
                  >
                    ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                  </button>
                  <button
                    className="btn-decline"
                    onClick={() => handleResponse(invitation.id, 'declined')}
                  >
                    ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                  </button>
                </div>
              )}

              {invitation.status !== 'pending' && (
                <div className="invitation-response">
                  <p>
                    –í—ã {invitation.status === 'accepted' ? '–ø—Ä–∏–Ω—è–ª–∏' : '–æ—Ç–∫–ª–æ–Ω–∏–ª–∏'} —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    {invitation.responded_at && ` ${formatDateTime(invitation.responded_at)}`}
                  </p>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SessionInvitations;